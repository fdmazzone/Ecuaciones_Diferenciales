## -*- encoding: utf-8 -*-

# This file was *autogenerated* from the file Presentacion3.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_907 = Integer(907); _sage_const_396 = Integer(396); _sage_const_398 = Integer(398); _sage_const_p2 = RealNumber('.2'); _sage_const_465 = Integer(465); _sage_const_463 = Integer(463); _sage_const_13 = Integer(13); _sage_const_12 = Integer(12); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_17 = Integer(17); _sage_const_16 = Integer(16); _sage_const_15 = Integer(15); _sage_const_14 = Integer(14); _sage_const_18 = Integer(18); _sage_const_905 = Integer(905)## This file (Presentacion3.sagetex.sage) was *autogenerated* from Presentacion3.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('Presentacion3', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = _sage_const_4 
_st_.blockbegin()
try:
 from sympy import *
 x,y,y_n=symbols('x,y,y_n')
 y=Function('y')(x)
 y_n=Function('y_n')(x)
 y=exp(y_n)/x
 eq=Eq(y.diff(x)-(ln(x*y))**_sage_const_2 *x*y+y/x,_sage_const_0 )
 simplify(eq)
except:
 _st_.goboom(_sage_const_12 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_14 
 _st_.inline(_sage_const_0 , latex(simplify(eq)))
except:
 _st_.goboom(_sage_const_14 )
_st_.current_tex_line = _sage_const_4 
_st_.blockbegin()
try:
 from sympy import *
 x,x_n=symbols('x,x_n')
 x_n=acos(x)
 y=Function('y')(x_n)
 Ecuacion=-y.diff()+_sage_const_1 /(sqrt(_sage_const_1 -x**_sage_const_2 ))*y
except:
 _st_.goboom(_sage_const_10 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_12 
 _st_.inline(_sage_const_1 , latex(simplify(Ecuacion)))
except:
 _st_.goboom(_sage_const_12 )
_st_.current_tex_line = _sage_const_5 
_st_.blockbegin()
try:
 from sympy import *
 x=symbols('x')
 y=Function('y')(x)
 r=sqrt(x**_sage_const_2 +y**_sage_const_2 )
 theta=atan(y/x)
 Expr2=r.diff(x)/theta.diff(x)
 Expr3=Expr2.subs(y.diff(x),\
 (y**_sage_const_3 +x**_sage_const_2 *y-x-y)/(x**_sage_const_3 +x*y**_sage_const_2 -x+y))
 r,theta=symbols('r,theta',positive=True)
 Expr4=Expr3.subs([(y,r*sin(theta)),\
 (x,r*cos(theta))])
 Expr5=simplify(Expr4)
except:
 _st_.goboom(_sage_const_18 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_3 
 _st_.inline(_sage_const_2 , latex(powsimp(Expr5)))
except:
 _st_.goboom(_sage_const_3 )
try:
 _st_.current_tex_line = _sage_const_3 
 _st_.inline(_sage_const_2 , latex(powsimp(Expr5)))
except:
 _st_.goboom(_sage_const_3 )
try:
 _st_.current_tex_line = _sage_const_3 
 _st_.inline(_sage_const_2 , latex(powsimp(Expr5)))
except:
 _st_.goboom(_sage_const_3 )
try:
 _st_.current_tex_line = _sage_const_3 
 _st_.inline(_sage_const_2 , latex(powsimp(Expr5)))
except:
 _st_.goboom(_sage_const_3 )
_st_.current_tex_line = _sage_const_396 
_st_.blockbegin()
try:
 reset()
except:
 _st_.goboom(_sage_const_398 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_3 
 _st_.commandline(_sage_const_0 , r"""
sage: r,theta=var('r,theta')
sage: U = CoordinatePatch((r,theta))
sage: F = DifferentialForms(U)
sage: x= DifferentialForm(F, 0, r*cos(theta))
sage: y= DifferentialForm(F, 0, r*sin(theta))
sage: w=(x^3+x*y^2-x+y)*y.diff()-(y^3+x^2*y-x-y)*x.diff()
sage: w[0].simplify_full()
sage: w[1].simplify_full()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_12 )
try:
 _st_.current_tex_line = _sage_const_13 
 _st_.inline(_sage_const_3 , latex(w[_sage_const_0 ].simplify_full()))
except:
 _st_.goboom(_sage_const_13 )
try:
 _st_.current_tex_line = _sage_const_13 
 _st_.inline(_sage_const_4 , latex(w[_sage_const_1 ].simplify_full()))
except:
 _st_.goboom(_sage_const_13 )
_st_.current_tex_line = _sage_const_463 
_st_.blockbegin()
try:
 reset()
except:
 _st_.goboom(_sage_const_465 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_2 
 _st_.commandline(_sage_const_1 , r"""
sage: G=SymmetricGroup(5)
sage: sigma=G([(1,2,3),(4,5)])
sage: sigma^2
sage: sigma^3
sage: sigma^6
sage: G.order()
sage: H=G.subgroup([sigma])
sage: H.order()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_11 )
try:
 _st_.current_tex_line = _sage_const_2 
 _st_.commandline(_sage_const_2 , r"""
sage: H.list()
sage: H.is_normal()
sage: G1=DihedralGroup(3)
sage: G1[-2]
sage: H1=G1.subgroup(G1[-2])
sage: H1.is_normal()
sage: G1.quotient(H1)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_10 )
_st_.current_tex_line = _sage_const_3 
_st_.blockbegin()
try:
 from sympy import *
 T=lambda x,y,epsilon:  Matrix([x+epsilon,y])
 x,y,epsilon1,epsilon2=\
 symbols('x,y,epsilon1,epsilon2')
 PropGrupo=T(T(x,y,epsilon1)[_sage_const_0 ],\
 T(x,y,epsilon1)[_sage_const_1 ],epsilon2)-\
 T(x,y,epsilon1+epsilon2)
except:
 _st_.goboom(_sage_const_11 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_13 
 _st_.inline(_sage_const_5 , latex(PropGrupo))
except:
 _st_.goboom(_sage_const_13 )
_st_.current_tex_line = _sage_const_3 
_st_.blockbegin()
try:
 from sympy import *
 x,y,epsilon,epsilon1,epsilon2=\
 symbols('x,y,epsilon,epsilon1,epsilon2')
 T=Matrix([x+epsilon,y])
 PropGrupo=T.subs([(\
 x,T.subs(epsilon,epsilon1)[_sage_const_0 ]),\
 (_sage_const_1 ,T.subs(epsilon,epsilon1)[_sage_const_1 ]),\
 (epsilon,epsilon2)\
 ])\
 -T.subs(epsilon,epsilon1+epsilon2)
 
except:
 _st_.goboom(_sage_const_15 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_17 
 _st_.inline(_sage_const_6 , latex(PropGrupo))
except:
 _st_.goboom(_sage_const_17 )
_st_.current_tex_line = _sage_const_3 
_st_.blockbegin()
try:
 from sympy import *
 x,theta=symbols('x,theta')
 y=Function('y')(x)
 x_n=cos(theta)*x-sin(theta)*y
 y_n=sin(theta)*x+cos(theta)*y
 Expr2=y_n.diff(x)/x_n.diff(x)
 Expr3=Expr2.subs(y.diff(),\
 (y**_sage_const_3 +x**_sage_const_2 *y-x-y)/(x**_sage_const_3 +x*y**_sage_const_2 -x+y))
 x_n,y_n=symbols('x_n,y_n')
 Expr4=Expr3.subs([(y, -sin(theta)*x_n+cos(theta)*y_n),\
 (x,cos(theta)*x_n+sin(theta)*y_n)])
 Expr5=simplify(Expr4)
except:
 _st_.goboom(_sage_const_16 )
_st_.blockend()
_st_.current_tex_line = _sage_const_3 
_st_.blockbegin()
try:
 
 Expr6=Expr5.subs(sin(_sage_const_2 *theta + pi/_sage_const_4 ),\
 sin(_sage_const_2 *theta)*sqrt(_sage_const_2 )+cos(_sage_const_2 *theta)*sqrt(_sage_const_2 ))
 Expr7=Expr6.subs(cos(_sage_const_2 *theta),\
 _sage_const_1 +(cos(theta))**_sage_const_2    )
 Expr8=Expr7.subs(cos(_sage_const_2 *theta),\
 _sage_const_1 +(cos(theta))**_sage_const_2 )
 Expr9=Expr8.subs(sin(_sage_const_2 *theta),\
 _sage_const_1 -(cos(theta))**_sage_const_2 )
except:
 _st_.goboom(_sage_const_13 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_15 
 _st_.inline(_sage_const_7 , latex(simplify(Expr9)))
except:
 _st_.goboom(_sage_const_15 )
try:
 _st_.current_tex_line = _sage_const_15 
 _st_.inline(_sage_const_7 , latex(simplify(Expr9)))
except:
 _st_.goboom(_sage_const_15 )
try:
 _st_.current_tex_line = _sage_const_15 
 _st_.inline(_sage_const_7 , latex(simplify(Expr9)))
except:
 _st_.goboom(_sage_const_15 )
try:
 _st_.current_tex_line = _sage_const_15 
 _st_.inline(_sage_const_7 , latex(simplify(Expr9)))
except:
 _st_.goboom(_sage_const_15 )
_st_.current_tex_line = _sage_const_905 
_st_.blockbegin()
try:
 reset()
except:
 _st_.goboom(_sage_const_907 )
_st_.blockend()
_st_.current_tex_line = _sage_const_2 
_st_.blockbegin()
try:
 x,y,epsilon = var('x,y,epsilon')
 x_n=cos(epsilon)*x-sin(epsilon)*y
 y_n=sin(epsilon)*x+cos(epsilon)*y
 xi=x_n.diff(epsilon)(epsilon=_sage_const_0 )
 eta=y_n.diff(epsilon)(epsilon=_sage_const_0 )
 p=plot([])
 for x_abs in srange(_sage_const_0 ,_sage_const_1 ,_sage_const_p2 ):
     p+=parametric_plot([x_n(x=x_abs,y=_sage_const_0 ),\
 y_n(x=x_abs,y=_sage_const_0 )], (epsilon,_sage_const_0 ,_sage_const_2 *pi))
 p+= plot_vector_field((xi,eta),(x,-_sage_const_1 ,_sage_const_1 ),\
 (y,-_sage_const_1 ,_sage_const_1 ))
except:
 _st_.goboom(_sage_const_14 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_2 
 _st_.plot(_sage_const_0 , format='notprovided', _p_=p)
except:
 _st_.goboom(_sage_const_2 )
try:
 _st_.current_tex_line = _sage_const_3 
 _st_.commandline(_sage_const_3 , r"""
sage: from sympy import *
sage: x,y,epsilon=symbols('x,y,epsilon')
sage: T=Matrix([x/(1-epsilon*x),y/(1-epsilon*x)])
sage: xi=T[0].diff(epsilon).subs(epsilon,0)
sage: xi
sage: eta=T[1].diff(epsilon).subs(epsilon,0)
sage: eta/xi
sage: y=Function('y')(x)
sage: dsolve(y.diff(x)-y/x,y)


""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_15 )
try:
 _st_.current_tex_line = _sage_const_3 
 _st_.commandline(_sage_const_4 , r"""
sage: Integral(1/xi,x).doit()

""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_6 )
_st_.endofdoc()

