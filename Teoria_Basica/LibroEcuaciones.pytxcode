=>PYTHONTEX#py#default#defaultverb#0#verbatim####Uni1.tex#105#
>>>from sympy import *
>>>m,g,c,k,t=symbols('m,g,c,k,t')
>>>v=m/c*g+k*exp(-c/m*t)
>>>simplify(v.diff(t)+c/m*v)
g
=>PYTHONTEX#py#default#defaultverb#1#verbatim####Uni1.tex#117#
>>>v=symbols('v',cls=Function)
>>>EqCaida=Eq(v(t).diff(t)+c/m*v(t),g)
>>>Vel=dsolve(EqCaida,v(t))
>>> Vel
v(t) == (g*m + exp(c*(C1 - t/m)))/c
=>PYTHONTEX#py#default#defaultverb#2#verbatim####Uni1.tex#127#
>>> type(Vel)
<class 'sympy.core.relational.Equality'>
=>PYTHONTEX#py#default#defaultverb#3#verbatim####Uni1.tex#448#
x=symbols('x')
y=Function('y')(x)
MiEcua=Eq(y.diff(x),y/x)
f=dsolve(MiEcua,y)
=>PYTHONTEX#py#default#defaultverb#4#verbatim####Uni1.tex#488#
x=symbols('x')
f=plot(1/x,(x,-3,3),ylim=(-3,3))
=>PYTHONTEX#py#default#defaultverb#5#verbatim####Uni1.tex#515#
from sympy import *
x,y=symbols('x,y')
Rango=range(21)
L=[tan(pi*k/21.0) for k in Rango]
p=plot(L[0]*x,(x,-2,2),show=False,xlim=(-2,2),\
ylim=(-2,2),aspect_ratio=(1,1))
for pend in L[1:]:
    p1=plot(pend*x,(x,-2,2),show=False,\
xlim=(-2,2),ylim=(-2,2),aspect_ratio=(1,1))
    p.append(p1[0])
for r in range(1,10):
    p1=plot_implicit(Eq(x**2 + y**2, 0.2*r),\
show=False,aspect_ratio=(1,1),xlim=(-2,2),ylim=(-2,2))
    p.append(p1[0])
p.show()
=>PYTHONTEX#py#default#defaultverb#6#verbatim####Uni1.tex#615#
x=symbols('x')
y=Function('y')(x)
MiEcua=Eq(y.diff(x),y/x)
tipo=classify_ode(MiEcua,y)
=>PYTHONTEX#py#default#defaultverb#7#verbatim####Uni1.tex#1737#
theta=symbols('theta')
from sympy.plotting import *
plot_parametric(theta-sin(theta),1-cos(theta),(theta,0,10*pi))
=>PYTHONTEX#py#default#defaultverb#8#verbatim####Uni1.tex#1759#
x,c=symbols('x,c')
y=Function('y')(x)
MiEcua=Eq(y.diff(x),sqrt((c-y)/y))
f=dsolve(MiEcua,y,hint='separable')
=>PYTHONTEX#py#default#default#0#block####Uni1.tex#1838#
from sympy import *
from sympy.diffgeom.rn import R2
eq=(-sqrt(R2.x**2+R2.y**2)+R2.x)*R2.dx+R2.y*R2.dy
M=eq.rcall(R2.e_theta)
N=eq.rcall(R2.e_r)
x,y,theta=symbols('x,y,theta')
r=symbols('r',positive=True)
subst={R2.x:r*cos(theta),R2.y:r*sin(theta),R2.theta:theta,R2.r:r}
M=M.subs(subst).simplify()
N=N.subs(subst).simplify()
mu=(N.diff(theta)-M.diff(r))/M
FactInt=exp(Integral(mu,r).doit())
phi=(M/r).integrate(theta)
g=Function('g')(r)
phi=phi+g
dsolve(phi.diff(r)-N/r,g)
phi=(M/r).integrate(theta)+r
phi
=>PYTHONTEX#py#default#default#1#i####Uni1.tex#1860#
latex(phi)
=>PYTHONTEX#sympy#default#default#0#block####Uni2.tex#126#
from sympy import *
x=symbols('x') #unico simbolo primitivo
y_n=Function('y_n')(x) #variables nuevas, funciones de x
y=exp(y_n)/x #relacion entre y, y_n
eq=Eq(y.diff(x)-(ln(x*y))**2*x*y+y/x,0) #la ecuacion
eq1=simplify(eq) # simplifica expresiones
=>PYTHONTEX#sympy#default#default#1#i####Uni2.tex#136#
eq1
=>PYTHONTEX#sympy#default#default#2#block####Uni2.tex#167#
x=symbols('x')
x_n=acos(x)
y=Function('y')(x_n)
Ecuacion=-y.diff()+1/(sqrt(1-x**2))*y
xn=symbols('xn')
Eq=Ecuacion.subs(x,cos(xn))
=>PYTHONTEX#sympy#default#default#3#i####Uni2.tex#178#
Eq
=>PYTHONTEX#sympy#default#default#4#block####Uni2.tex#207#
x=symbols('x')
y=Function('y')(x)
r=sqrt(x**2+y**2)
theta=atan(y/x)
Expr2=r.diff(x)/theta.diff(x)
=>PYTHONTEX#sympy#default#default#5#i####Uni2.tex#218#
Expr2
=>PYTHONTEX#sympy#default#default#6#block####Uni2.tex#221#
Expr3=Expr2.subs(y.diff(x),(y**3+x**2*y-x-y)/(x**3+x*y**2-x+y))
r,theta=symbols('r,theta',positive=True)
Expr4=Expr3.subs([(y,r*sin(theta)),(x,r*cos(theta))])
Expr5=simplify(Expr4)
=>PYTHONTEX#sympy#default#default#7#block####Uni2.tex#354#
x,y,epsilon,epsilon1,epsilon2=symbols('x,y,epsilon,epsilon1,epsilon2')
T=Matrix([x+epsilon,y])
x_copete=T.subs(epsilon,epsilon1)[0]
y_copete=T.subs(epsilon,epsilon1)[1]
PropGrupo=T.subs([(x,x_copete),(y,y_copete),(epsilon,epsilon2)])\
-T.subs(epsilon,epsilon1+epsilon2)
=>PYTHONTEX#sympy#default#default#8#i####Uni2.tex#363#
PropGrupo
=>PYTHONTEX#sympy#default#default#9#block####Uni2.tex#492#
x,theta=symbols('x,theta')
y=Function('y')(x)
x_n=cos(theta)*x-sin(theta)*y
y_n=sin(theta)*x+cos(theta)*y
Expr2=y_n.diff(x)/x_n.diff(x)
Expr3=Expr2.subs(y.diff(),\
(y**3+x**2*y-x-y)/(x**3+x*y**2-x+y))
x_n,y_n=symbols('x_n,y_n')
Expr4=Expr3.subs([(y, -sin(theta)*x_n+cos(theta)*y_n),\
(x,cos(theta)*x_n+sin(theta)*y_n)])
Expr5=simplify(Expr4)
=>PYTHONTEX#sympy#default#default#10#i####Uni2.tex#515#
Expr5
=>PYTHONTEX#sympy#default#default#11#block####Uni2.tex#844#
from sympy import *
init_printing()
x,y=symbols('x,y',real=True)
f=(y**3+x**2*y-x-y)/(x**3+x*y**2-x+y)
=>PYTHONTEX#sympy#default#default#12#block####Uni2.tex#857#
a,b,c,d,h,k=symbols('a,b,c,d,h,k',real=True)
xi=a*x+b*y+h
eta=c*x+d*y+k
Q=eta-f*xi
=>PYTHONTEX#sympy#default#default#13#block####Uni2.tex#865#
CondSim=Q.diff(x)+f*Q.diff(y)-f.diff(y)*Q
CondSim=simplify(CondSim)
=>PYTHONTEX#sympy#default#default#14#block####Uni2.tex#874#
P1,P2=fraction(CondSim)
P1
=>PYTHONTEX#sympy#default#default#15#block####Uni2.tex#893#
P1.subs(y,0).collect(x)
=>PYTHONTEX#sympy#default#default#16#block####Uni2.tex#902#
P11=P1.subs({h:0,k:0,d:-a,c:-2*a-b})
P11.subs(y,1).collect(x)
=>PYTHONTEX#sympy#default#default#17#block####Uni2.tex#908#
xi=xi.subs({d:0,a:0,b:-1,c:1,h:0,k:0})
eta=eta.subs({d:0,a:0,b:-1,c:1,h:0,k:0})
xi,eta
=>PYTHONTEX#sympy#default#default#18#block####Uni2.tex#914#
CondSimLin=Q.diff(x)+f*Q.diff(y)-f.diff(y)*Q
CondSimLin.simplify()
=>PYTHONTEX#sympy#default#default#19#block####Uni2.tex#1095#
x,y,epsilon=symbols('x,y,epsilon')
T=Matrix([x/(1-epsilon*x),y/(1-epsilon*x)])
xi=T[0].diff(epsilon).subs(epsilon,0)
print(xi)
eta=T[1].diff(epsilon).subs(epsilon,0)
print(eta/xi)
y=Function('z')(x)
sol=dsolve(y.diff(x)-y/x,y)
print(sol)
Integral(1/xi,x).doit()
=>PYTHONTEX#sympy#default#default#20#block####Uni2.tex#1222#
x=symbols('x')
y=Function('y')(x)
from sympy.solvers.ode import infinitesimals
xi_eta=infinitesimals((y+1)/x+y**2/x**3-y.diff(x))

=>PYTHONTEX#sympy#default#default#21#i####Uni2.tex#1230#
xi_eta
=>PYTHONTEX#sympy#default#default#22#block####Uni6.tex#330#
from sympy import *
n=symbols('n',integer=True)
y = Function('y')
f=Equality(y(n),y(n-1)+y(n-2))
sol=rsolve(f,y(n))
=>PYTHONTEX#sympy#default#default#23#i####Uni6.tex#339#
sol
=>PYTHONTEX#sympy#default#default#23#i####Uni6.tex#339#
sol
=>PYTHONTEX#sympy#default#default#23#i####Uni6.tex#339#
sol
=>PYTHONTEX#sympy#default#default#23#i####Uni6.tex#339#
sol
=>PYTHONTEX#sympy#default#default#24#code####Uni6.tex#455#
def Legendre(n):
    orden=n+2
    a=symbols('a0:%s' %orden)
    x=symbols('x')
    y=sum([a[i]*x**i for i in range(orden)])
    Ecua=(1-x**2)*y.diff(x,2)-2*x*y.diff(x)+n*(n+1)*y
    Ecuaciones=[Ecua.diff(x,i).subs(x,0)/factorial(i) for i in range(orden-2)]
    s=symbols('s')
    if n%2==0:
        Ecuaciones+=[a[0]-s,a[1]]
    else:
        Ecuaciones+=[a[0],a[1]-s]
    Sol_a_n=solve(Ecuaciones,a)
    y=y.subs(Sol_a_n)
    sol=solve(y.subs(x,1)-1,s)
    return y.subs(s,sol[0])

print('\\begin{align*}')
for n in range(1,10):
    print(r'P_'+str(n)+'(x)&='+latex(Legendre(n)) + r'\\')
print('\\end{align*}')
=>PYTHONTEX#sympy#default#default#25#block####Uni8.tex#145#
from scipy.integrate import odeint
import numpy as np
import matplotlib.pyplot as plt
=>PYTHONTEX#sympy#default#default#26#block####Uni8.tex#152#
def ecuacion(x,t,k,I):
    x1,x2,x3=x
    k01,k21,k31,k02,k12,k13=k
    x1prima=-(k01+k21+k31)*x1+k13*x3+k12*x2+I
    x2prima=-(k12+k02)*x2+k21*x1
    x3prima= -k13*x3+k31*x1
    return x1prima, x2prima, x3prima
=>PYTHONTEX#sympy#default#default#27#block####Uni8.tex#164#
I=49.3
k=0.0211,0.0111,0.0039,.0162,0.0124,0.000035
t=np.linspace(0,800,101)
x0=[0,0,0]
x=odeint(ecuacion,x0,t,args=(k,I))
fig, ax = plt.subplots(1,1)
ax.plot(t,x[:,0],marker='o')
ax.plot(t,x[:,1],marker='^')
ax.plot(t,x[:,2],marker='s')
=>PYTHONTEX#sympy#default#default#28#block####Uni8.tex#176#
x0=[1800,800,1000]
x=odeint(ecuacion,x0,t,args=(k,I))
ax.plot(t,x[:,0],marker='>')
ax.plot(t,x[:,1],marker='<')
ax.plot(t,x[:,2],marker='+')
ax.legend(('Sangre1','Tejidos1','Huesos1',\
    'Sangre2','Tejidos2','Huesos2'))
plt.savefig('plomo2.pdf', bbox_inches='tight')
=>PYTHONTEX#sympy#default#default#29#block####Uni8.tex#799#
from sympy import *
omega,t=symbols('omega,t')
A=Matrix([[0, 1],[-omega**2,0]])
G=t**0*A**0
for j in range(1,10):
    G=G+t**j*A**j/factorial(j)
=>PYTHONTEX#sympy#default#default#30#i####Uni8.tex#810#
G
=>PYTHONTEX#sympy#default#defaultverb#0#verbatim####Uni8.tex#1161#
from sympy import *
t=symbols('t')
H=Matrix([[1, 0],[0,1]])
R=Matrix([[cos(t), sin(t)],[-sin(t),cos(t)]])
G=H*R*H.inv()
Phi=G*Matrix([[.1],[0]])
P=plot_parametric(Phi[0],Phi[1],(t,0,2*pi),show=False,\
    aspect_ratio=(1,1))
X=[0.1*n for n in range(1,20)]
for x0 in X:
    Phi=G*Matrix([[x0],[0]])
    P.append(plot_parametric(Phi[0],Phi[1],(t,0,2*pi),\
        show=False,aspect_ratio=(1,1))[0])
P.show()
=>PYTHONTEX#sympy#default#default#31#block####Uni8.tex#1343#
A=Matrix([[-2, -1],[0,-1]])
delta=A.det()
tau=A.trace()
delta>0,delta<tau**2/4
=>PYTHONTEX#sympy#default#default#32#i####Uni8.tex#1349#
delta>0
=>PYTHONTEX#sympy#default#default#33#i####Uni8.tex#1349#
delta<tau**2/4
=>PYTHONTEX#sympy#default#default#34#block####Uni8.tex#1350#
P,D=A.diagonalize()
=>PYTHONTEX#sympy#default#default#35#i####Uni8.tex#1355#
P
=>PYTHONTEX#sympy#default#default#36#i####Uni8.tex#1355#
D
=>PYTHONTEX#sympy#default#default#37#block####Uni8.tex#1358#
tau<0
=>PYTHONTEX#sympy#default#default#38#i####Uni8.tex#1361#
tau<0
=>PYTHONTEX#sympy#default#default#39#block####Uni8.tex#1539#
A=Matrix([[1, 4], [-2, -3]])
delta=A.det()
tau=A.trace()
delta>0,delta>tau**2/4
=>PYTHONTEX#sympy#default#default#40#i####Uni8.tex#1546#
delta>0
=>PYTHONTEX#sympy#default#default#41#i####Uni8.tex#1546#
delta>tau**2/4
=>PYTHONTEX#sympy#default#default#42#block####Uni8.tex#1547#
V,D=A.diagonalize()
=>PYTHONTEX#sympy#default#default#43#i####Uni8.tex#1552#
V
=>PYTHONTEX#sympy#default#default#44#i####Uni8.tex#1552#
D
=>PYTHONTEX#sympy#default#default#45#block####Uni8.tex#1557#
P=Matrix([re(V[:,0]).T,im(V[:,0]).T])
=>PYTHONTEX#sympy#default#default#46#i####Uni8.tex#1561#
P
=>PYTHONTEX#sympy#default#default#47#block####Uni8.tex#1563#
J=P.inv()*A*P
=>PYTHONTEX#sympy#default#default#48#i####Uni8.tex#1567#
J
=>PYTHONTEX#sympy#default#default#49#i####Uni8.tex#1582#
P
=>PYTHONTEX#sympy#default#default#50#i####Uni8.tex#1582#
P.inv()
=>PYTHONTEX#sympy#default#default#51#i####Uni8.tex#1582#
P*Matrix([[cos(-2*t) , sin(-2*t)], [-sin(-2*t),cos(-2*t)]])*P.inv()
=>PYTHONTEX#sympy#default#default#49#i####Uni8.tex#1582#
P
=>PYTHONTEX#sympy#default#default#50#i####Uni8.tex#1582#
P.inv()
=>PYTHONTEX#sympy#default#default#51#i####Uni8.tex#1582#
P*Matrix([[cos(-2*t) , sin(-2*t)], [-sin(-2*t),cos(-2*t)]])*P.inv()
=>PYTHONTEX#sympy#default#default#52#block####Uni8.tex#1587#
t=symbols('t',real=True)
G=exp(t*A)
=>PYTHONTEX#sympy#default#default#53#i####Uni8.tex#1593#
G
=>PYTHONTEX#sympy#default#default#54#block####Uni8.tex#1691#
from sympy import *
A=Rational(1,90)*Matrix([[-55, 68, -44],\
    [-124, 53, -56],\
    [-2, 46, -7]])
P1,J1=A.jordan_form()
=>PYTHONTEX#sympy#default#default#55#i####Uni8.tex#1700#
P1
=>PYTHONTEX#sympy#default#default#56#i####Uni8.tex#1700#
J1
=>PYTHONTEX#sympy#default#default#57#i####Uni8.tex#1705#
 {J1[i,i] for i in range(3)} 
=>PYTHONTEX#sympy#default#default#58#block####Uni8.tex#1709#
P=Matrix([P1[:,0].T,re(P1[:,2]).T,im(P1[:,2]).T]).T
J=P.inv()*A*P
=>PYTHONTEX#sympy#default#default#59#i####Uni8.tex#1715#
P
=>PYTHONTEX#sympy#default#default#60#i####Uni8.tex#1715#
J
=>PYTHONTEX#sympy#default#default#61#i####Uni8.tex#1719#
P[:,1]
=>PYTHONTEX#sympy#default#default#62#i####Uni8.tex#1719#
P[:,2]
=>PYTHONTEX#sympy#default#default#63#i####Uni8.tex#1723#
P[:,0]
=>PYTHONTEX#sympy#default#default#64#code####Uni8.tex#1728#
t=symbols('t',real=True)
etJ=exp(t*J)
=>PYTHONTEX#sympy#default#default#65#i####Uni8.tex#1735#
etJ
=>PYTHONTEX#sympy#default#default#66#i####Uni8.tex#1743#
P
=>PYTHONTEX#sympy#default#default#67#i####Uni8.tex#1743#
etJ
=>PYTHONTEX#sympy#default#default#68#i####Uni8.tex#1743#
P.inv()
=>PYTHONTEX#sympy#default#default#66#i####Uni8.tex#1743#
P
=>PYTHONTEX#sympy#default#default#67#i####Uni8.tex#1743#
etJ
=>PYTHONTEX#sympy#default#default#68#i####Uni8.tex#1743#
P.inv()
=>PYTHONTEX#sympy#default#defaultverb#1#verbatim####Uni8.tex#1748#
from sympy.plotting import plot3d_parametric_line
G=exp(t*A)
sol=G*P[:,2]
p=plot3d_parametric_line(sol[0],sol[1],sol[2],\
    (t,-10,12),line_color='blue')
sol=G*P[:,0]
p.append(plot3d_parametric_line(sol[0],sol[1],sol[2],\
    (t,-100,12),line_color='red')[0])
sol=G*(P[:,0]+P[:,2])
p.append(plot3d_parametric_line(sol[0],sol[1],sol[2],\
    (t,-10,12),line_color='green')[0])
p.show()
=>PYTHONTEX#sympy#default#default#69#code####Uni8.tex#1779#
J=Matrix([[-1,1,0,0], [0,-1,0,0],[0,0,1,-2],[0,0,2,1]])
P=Matrix([[-1,1,3,0], [0,-1,0,1],[0,-5,1,-2],[-2,3,2,1]])
A=P.inv()*J*P
=>PYTHONTEX#sympy#default#default#70#i####Uni8.tex#1786#
A
=>PYTHONTEX#sympy#default#default#71#block####Uni8.tex#1789#
from sympy import *
A=Rational(1,13)*Matrix([[11, 115, -56, 61],\
    [-6, 20, 1, 14],\
    [10, 23, -32, 20],\
    [-6, 33, 1, 1]])
P1,J1=A.jordan_form()
=>PYTHONTEX#sympy#default#default#72#i####Uni8.tex#1802#
 {J1[i,i] for i in range(4)} 
=>PYTHONTEX#sympy#default#default#73#block####Uni8.tex#1806#
P=Matrix([P1[:,0].T,P1[:,1].T,re(P1[:,3]).T,im(P1[:,3]).T]).T
J=P.inv()*A*P
=>PYTHONTEX#sympy#default#default#74#i####Uni8.tex#1813#
P
=>PYTHONTEX#sympy#default#default#75#i####Uni8.tex#1813#
J
=>PYTHONTEX#sympy#default#default#76#i####Uni8.tex#1817#
P[:,2]
=>PYTHONTEX#sympy#default#default#77#i####Uni8.tex#1817#
P[:,3]
=>PYTHONTEX#sympy#default#default#78#i####Uni8.tex#1821#
P[:,0]
=>PYTHONTEX#sympy#default#default#79#i####Uni8.tex#1821#
P[:,1]
=>PYTHONTEX#sympy#default#default#80#code####Uni8.tex#1826#
t=symbols('t',real=True)
etJ=exp(t*J)
=>PYTHONTEX#sympy#default#default#81#i####Uni8.tex#1833#
etJ
=>PYTHONTEX#sympy#default#default#82#i####Uni8.tex#1841#
P
=>PYTHONTEX#sympy#default#default#83#i####Uni8.tex#1841#
etJ
=>PYTHONTEX#sympy#default#default#84#i####Uni8.tex#1841#
P.inv()
=>PYTHONTEX#sympy#default#default#82#i####Uni8.tex#1841#
P
=>PYTHONTEX#sympy#default#default#83#i####Uni8.tex#1841#
etJ
=>PYTHONTEX#sympy#default#default#84#i####Uni8.tex#1841#
P.inv()
=>PYTHONTEX#sympy#default#default#85#code####Uni8.tex#1853#
J=Matrix([[-1,1,1,0], [-1,-1,0,1],[0,0,-1,1],[0,0,-1,-1]])
P=Matrix([[-1,1,3,0], [0,-1,0,1],[0,-5,1,-2],[-2,3,2,1]])
A=P.inv()*J*P
=>PYTHONTEX#sympy#default#default#86#i####Uni8.tex#1860#
A
=>PYTHONTEX#sympy#default#default#87#block####Uni8.tex#1863#
from sympy import *
A=Rational(1,26)*Matrix([[-8, -244, 18, -70],\
[15, -69, 2, -15],\
[1, -119, -12, -27],\
[-11, 9, -24, -15]])
P1,J1=A.jordan_form()
=>PYTHONTEX#sympy#default#default#88#i####Uni8.tex#1876#
 {J1[i,i] for i in range(4)} 
=>PYTHONTEX#sympy#default#default#89#i####Uni8.tex#1878#
J1[0,0]
=>PYTHONTEX#sympy#default#default#90#i####Uni8.tex#1878#
J1[0,0]
=>PYTHONTEX#sympy#default#default#91#block####Uni8.tex#1880#
P=Matrix([re(P1[:,0]).T,im(P1[:,0]).T,re(P1[:,1]).T,\
    im(P1[:,1]).T]).T
J=P.inv()*A*P
=>PYTHONTEX#sympy#default#default#92#i####Uni8.tex#1888#
P
=>PYTHONTEX#sympy#default#default#93#i####Uni8.tex#1888#
J
=>PYTHONTEX#sympy#default#default#94#code####Uni8.tex#1892#
t=symbols('t',real=True)
etJ=exp(t*J)
=>PYTHONTEX#sympy#default#default#95#i####Uni8.tex#1899#
etJ
=>PYTHONTEX#sympy#default#default#96#i####Uni8.tex#1907#
P
=>PYTHONTEX#sympy#default#default#97#i####Uni8.tex#1907#
etJ
=>PYTHONTEX#sympy#default#default#98#i####Uni8.tex#1907#
P.inv()
=>PYTHONTEX#sympy#default#default#96#i####Uni8.tex#1907#
P
=>PYTHONTEX#sympy#default#default#97#i####Uni8.tex#1907#
etJ
=>PYTHONTEX#sympy#default#default#98#i####Uni8.tex#1907#
P.inv()
=>PYTHONTEX#sympy#default#default#99#block####Uni8.tex#1943#
k1,k2,k3,m1,m2=symbols('k1,k2,k3,m1,m2',\
    positive=True)
A=Matrix([[0,1,0,0],\
          [-(k1/m1+k3/m1), 0, k3/m1, 0],\
          [0,0,0,1],[k3/m2, 0, -(k3/m2+k2/m2),0] ])
A=A.subs({k1:1,k2:1,k3:1,m1:1,m2:1})
P,D=A.jordan_form()
=>PYTHONTEX#sympy#default#default#100#i####Uni8.tex#1953#
P
=>PYTHONTEX#sympy#default#default#101#i####Uni8.tex#1953#
D
=>PYTHONTEX#sympy#default#default#102#block####Uni8.tex#2056#
I=49.3
k01,k21,k31,k02,k12,k13=0.0211,0.0111,0.0039,\
    .0162,0.0124,0.000035
A=Matrix([[ -(k01+k21+k31), k12, k13],\
    [k21,-(k12+k02), 0],\
    [k31,0,-k13]])
P,D=A.diagonalize()
=>PYTHONTEX#sympy#default#default#103#code####Uni8.tex#2066#
P=P.applyfunc(lambda x: N(x,4))
D=D.applyfunc(lambda x: N(x,4))
=>PYTHONTEX#sympy#default#default#104#i####Uni8.tex#2073#
P
=>PYTHONTEX#sympy#default#default#105#i####Uni8.tex#2075#
D
=>PYTHONTEX#sympy#default#default#106#block####Uni8.tex#2081#
t,s=symbols('t,s',real=True)
G=P*exp(D*t)*P.inv()
Ginv=P*exp(-D*s)*P.inv()
B=Matrix([[I],[0],[0]])
x=G*(Integral(Ginv*B,(s,0,t)).doit()).simplify()
=>PYTHONTEX#py#default#defaultverb#9#verbatim####Apendice0.tex#179#
'''
Comentario  largo en un script de Python
'''
print("Hola mundo") # Comentario corto
=>PYTHONTEX#py#default#defaultverb#10#verbatim####Apendice0.tex#205#
x = 1
x = "texto"
=>PYTHONTEX#pycon#default#default#0#console####Apendice0.tex#232#
x=1
type(x)
x='Ecuaciones'
type(x)
=>PYTHONTEX#pycon#default#default#1#console####Apendice0.tex#266#
lista = ["abc", 42, 3.1415]
lista[0] # Acceder a un elemento por su indice
lista[-1] # Acceder a un elemento usando un indice negativo
lista.append(True) # Agregar un elemento al final de la lista
lista
del lista[3] # Borra un elemento de la lista usando un indice
lista[0] = "xyz" # Re-asignar el valor del primer elemento
lista[0:2]#elementos del indice "0" al "1"
lista_anidada = [lista, [True, 42]] #Es posible anidar listas
lista_anidada
lista_anidada[1][0] #accede lista dentro de otra lista
=>PYTHONTEX#pycon#default#default#2#console####Apendice0.tex#280#
tupla = ("abc", 42, 3.1415)
tupla[0] # Acceder a un elemento por su indice
del tupla[0] # No es posible borrar ni agregar
tupla[0] = "xyz" # Tampoco es posible re-asignar
tupla[0:2] # elementos del indice "0" al "2" sin incluir
tupla_anidada = (tupla, (True, 3.1415)) # es posible anidar
1, 2, 3, "abc" # Esto tambien es una tupla
(1) #  no es una tupla, ya que no posee al menos una coma
(1,) # si es una tupla
(1, 2) # Con mas de un elemento no es necesaria la coma final
(1, 2,) # Aunque agregarla no modifica el resultado
=>PYTHONTEX#pycon#default#default#3#console####Apendice0.tex#308#
dicci = {"cadena": "abc", "numero": 42, "lista": [True, 42]}
dicci["cadena"] # Usando una clave, se accede a su valor
dicci["lista"][0]
dicci["cadena"] = "xyz" # Re-asignar el valor de una clave
dicci["cadena"]
dicci["decimal"] = 3.1415927 # nuevo elemento clave:valor
dicci["decimal"]
dicci_mixto = {"tupla": (True, 3.1415), "diccionario": dicci}
dicci_mixto["diccionario"]["lista"][1]
dicci = {("abc",): 42} # tupla puede ser clave
dicci = {["abc"]: 42} # una clave no puede ser lista
=>PYTHONTEX#py#default#defaultverb#11#v####Apendice0.tex#327#
range(n)
=>PYTHONTEX#pycon#default#default#4#console####Apendice0.tex#329#
range(5) #
[i*i for i in range(5)]
lista = [(i, i + 2) for i in range(5)]
lista
=>PYTHONTEX#pycon#default#default#5#console####Apendice0.tex#350#
def suma(x, y = 2): #el argumento y tiene un valor por defecto
    return x + y # Retornar la suma

suma(4) # La variable "y" no se modifica, siendo su valor: 2
suma(4, 10) # La variable "y" si se modifica
=>PYTHONTEX#pycon#default#default#6#console####Apendice0.tex#359#
suma = lambda x, y = 2: x + y
suma(4) # La variable "y" no se modifica
suma(4, 10) # La variable "y" si se modifica
=>PYTHONTEX#py#default#defaultverb#12#v####Apendice0.tex#366#
if
=>PYTHONTEX#py#default#defaultverb#13#v####Apendice0.tex#367#
True
=>PYTHONTEX#py#default#defaultverb#14#v####Apendice0.tex#367#
elif
=>PYTHONTEX#py#default#defaultverb#15#v####Apendice0.tex#367#
else
=>PYTHONTEX#pycon#default#default#7#console####Apendice0.tex#371#
verdadero = True
if verdadero: # No es necesario poner "verdadero == True"
    print("Verdadero")
else:
    print("Falso")

lenguaje = "Python"
if lenguaje == "C":
    print("Lenguaje de programacion: C")
elif lenguaje == "Python": # tantos "elif" como se quiera
    print("Lenguaje de programacion: Python")
else:
    print("Lenguaje de programacion: indefinido")

if verdadero and lenguaje == "Python":
    print("Verdadero y Lenguaje de programacion: Python")

=>PYTHONTEX#py#default#defaultverb#16#v####Apendice0.tex#397#
for
=>PYTHONTEX#py#default#defaultverb#17#v####Apendice0.tex#400#
for
=>PYTHONTEX#py#default#defaultverb#18#v####Apendice0.tex#401#
in
=>PYTHONTEX#pycon#default#default#8#console####Apendice0.tex#405#
lista = ["a", "b", "c"]
for i in lista: # Iteramos sobre una lista, que es iterable
    print(i)

cadena = "abc"
for i in cadena: # Iteramos sobre una cadena, que es iterable
    print(i) # una coma al final evita un salto de linea

=>PYTHONTEX#py#default#defaultverb#19#v####Apendice0.tex#418#
while
=>PYTHONTEX#py#default#defaultverb#20#v####Apendice0.tex#420#
while
=>PYTHONTEX#pycon#default#default#9#console####Apendice0.tex#422#
numero = 0
while numero < 3:
    print(numero)
    numero += 1

=>PYTHONTEX#sympy#default#default#107#block####Apendice0.tex#443#
x=symbols('x')
type(x)
=>PYTHONTEX#sympy#default#default#108#block####Apendice0.tex#450#
f=(x**3+3*x)**4-(x-1)*3+8
=>PYTHONTEX#sympy#default#default#109#i####Apendice0.tex#454#
f
=>PYTHONTEX#sympy#default#default#110#block####Apendice0.tex#456#
type(f)
=>PYTHONTEX#sympy#default#default#111#block####Apendice0.tex#462#
g=f.expand()
=>PYTHONTEX#sympy#default#default#112#i####Apendice0.tex#466#
g
=>PYTHONTEX#sympy#default#default#113#block####Apendice0.tex#468#
h=f.diff(x,12)
=>PYTHONTEX#sympy#default#default#114#i####Apendice0.tex#471#
h
=>PYTHONTEX#sympy#default#defaultverb#2#verbatim####Apendice0.tex#473#
plot(f,(x,0,1))
=>PYTHONTEX#sympy#default#default#115#block####Apendice0.tex#485#
a=symbols('a1:6')
=>PYTHONTEX#sympy#default#default#116#i####Apendice0.tex#488#
a
=>PYTHONTEX#sympy#default#default#117#block####Apendice0.tex#490#
a=symbols('a:2:2')
=>PYTHONTEX#sympy#default#default#118#i####Apendice0.tex#493#
a
=>PYTHONTEX#sympy#default#default#119#block####Apendice0.tex#495#
b=Matrix(a).reshape(2,2)
=>PYTHONTEX#sympy#default#default#120#i####Apendice0.tex#500#
b
=>PYTHONTEX#sympy#default#default#121#block####Apendice0.tex#503#
type(b)
=>PYTHONTEX#sympy#default#default#122#block####Apendice0.tex#509#
lam=symbols('lambda')
p=(b-lam*eye(2)).det() #eye=indentidad
=>PYTHONTEX#sympy#default#default#123#i####Apendice0.tex#514#
p
=>PYTHONTEX#sympy#default#default#124#block####Apendice0.tex#520#
soluciones=solve(p,lam)
=>PYTHONTEX#sympy#default#default#125#i####Apendice0.tex#527#
soluciones[0]
=>PYTHONTEX#sympy#default#default#126#i####Apendice0.tex#527#
soluciones[1]
=>PYTHONTEX#sympy#default#default#125#i####Apendice0.tex#527#
soluciones[0]
=>PYTHONTEX#sympy#default#default#126#i####Apendice0.tex#527#
soluciones[1]
=>PYTHONTEX#sympy#default#default#127#block####Apendice0.tex#530#
M=[Rational(1,i+j) for i in range(1,5) for j in range(1,5)]
M=Matrix(M).reshape(4,4)
=>PYTHONTEX#sympy#default#default#128#i####Apendice0.tex#536#
M
=>PYTHONTEX#sympy#default#default#129#block####Apendice0.tex#540#
type(Rational(1,3))
=>PYTHONTEX#sympy#default#default#130#block####Apendice0.tex#546#
lam=symbols('lambda')
p=(M-lam*eye(4)).det()
=>PYTHONTEX#sympy#default#default#131#i####Apendice0.tex#552#
p
=>PYTHONTEX#sympy#default#default#132#block####Apendice0.tex#558#
p,q=symbols('p,q')
r=p>>q
=>PYTHONTEX#sympy#default#default#133#i####Apendice0.tex#563#
r
=>PYTHONTEX#sympy#default#default#134#block####Apendice0.tex#565#
r=simplify((p>>q)&(q>>p))
=>PYTHONTEX#sympy#default#default#135#i####Apendice0.tex#568#
r
=>PYTHONTEX#sympy#default#default#136#block####Apendice0.tex#571#
L=[r.subs({p:i,q:j}) for i in (True,False) for j in (True,False)]
=>PYTHONTEX#sympy#default#default#137#i####Apendice0.tex#575#
L
=>PYTHONTEX#sympy#default#default#138#block####Apendice0.tex#580#
x,y,z=symbols('x,y,z')
lam=symbols('lambda')
g1=2*x*z+2*y*z+x*y-12
f=x*y*z-lam*g1
Eq1=[f.diff(h) for h in (x,y,z)]
Eq2=Eq1+[g1]
sol=solve(Eq2,[x,y,z,lam])
=>PYTHONTEX#sympy#default#default#139#i####Apendice0.tex#590#
sol
=>PYTHONTEX#py#default#default#2#block####Apendice0.tex#599#
import numpy as np
import sympy as sp
=>PYTHONTEX#py#default#default#3#block####Apendice0.tex#607#
np.sin(1)
=>PYTHONTEX#py#default#default#4#i####Apendice0.tex#611#
np.sin(1)
=>PYTHONTEX:SETTINGS#
version=0.17
outputdir=pythontex-files-LibroEcuaciones
workingdir=.
workingdirset=false
gobble=none
rerun=default
hashdependencies=default
makestderr=true
stderrfilename=full
keeptemps=none
pyfuture=default
pyconfuture=none
pygments=true
pygglobal=:GLOBAL||
fvextfile=-1
pyconbanner=none
pyconfilename=stdin
depythontex=false
pygfamily=py|python3|
pygfamily=pycon|pycon|
pygfamily=sympy|python3|
pygfamily=sympycon|pycon|
pygfamily=pylab|python3|
pygfamily=pylabcon|pycon|
