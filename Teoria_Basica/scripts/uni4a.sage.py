# This file was *autogenerated* from the file uni4a.sage
from sage.all_cmdline import *   # import sage library
_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_10 = Integer(10); _sage_const_p3 = RealNumber('.3')#En una ecuación y''+py'+qy=0 con p^2-4q<0 proponemos el cambio de variables y=e#e^(-p/x*x)v(x) y vemos que resuelve v. 
x,p,q,lambda0=var('x,p,q,lambda0')
y=function('y',x)
v=function('v',x)
assume(p**_sage_const_2 -_sage_const_4 *q>_sage_const_0 )
y=exp(-p/_sage_const_2 *x)*v
ecua=y.diff(x,_sage_const_2 )+p*y.diff(x)+q*y==_sage_const_0 
ecuav=(ecua/exp(-p/_sage_const_2 *x)).simplify_full()
ecuav.show()


#queda la ecuación de un oscilador armónico. Cambiemos un poco los parámetros
nu=var('nu')
assume(nu>_sage_const_0 )
ecuav=ecuav.subs_expr((p**_sage_const_2 -_sage_const_4 *q)==-_sage_const_4 *nu**_sage_const_2 )
solv=desolve(ecuav,v,ivar=x)
y=solv*exp(mu*x)
y.show()

#graficamos algunas soluciones para distintos valores de los parámetros mu y nu 
#

k1,k2=var('k1,k2')
y0=y.subs({k1:_sage_const_1 ,k2:_sage_const_0 ,mu:-_sage_const_p3 ,nu:_sage_const_2 })
plot(y0,(x,-_sage_const_2 ,_sage_const_10 )).show()

k1,k2=var('k1,k2')
y0=y.subs({k1:_sage_const_1 ,k2:_sage_const_0 ,mu:_sage_const_p3 ,nu:_sage_const_2 })
plot(y0,(x,-_sage_const_2 ,_sage_const_10 )).show()

k1,k2=var('k1,k2')
y0=y.subs({k1:_sage_const_1 ,k2:_sage_const_0 ,mu:_sage_const_0 ,nu:_sage_const_2 })
plot(y0,(x,-_sage_const_2 ,_sage_const_10 )).show()
 
