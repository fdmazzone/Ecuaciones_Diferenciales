## This file (LibroEcuaciones.sage) was *autogenerated* from the file LibroEcuaciones.tex.
import sagetex
_st_ = sagetex.SageTeXProcessor('LibroEcuaciones')
_st_.blockbegin()
try:
 x,y=var('x,y')
 Eq1=y
 Eq2=-sin(x)
 Equilibrios=solve([Eq1,Eq2],[x,y])
 Equilibrios
except:
 _st_.goboom(287)
_st_.blockend()
try:
 _st_.inline(0, Equilibrios)
except:
 _st_.goboom(288)
_st_.blockbegin()
try:
 X(x,y)=[Eq1,Eq2]
 A=X.diff()(0,0)
 D=A.eigenmatrix_right()
except:
 _st_.goboom(294)
_st_.blockend()
try:
 _st_.inline(1, D)
except:
 _st_.goboom(296)
_st_.blockbegin()
try:
 Lambda(x,y)=1/2*y^2-cos(x)
 p=plot3d(Lambda,(x,-5,5),(y,-1,1))
except:
 _st_.goboom(305)
_st_.blockend()
try:
 _st_.plot(0, format='png', _p_=plot3d(Lambda,(x,-5,5),(y,-1,1)))
except:
 _st_.goboom(307)
_st_.blockbegin()
try:
 DLambdaX=Lambda.diff().dot_product(X)
except:
 _st_.goboom(315)
_st_.blockend()
try:
 _st_.inline(2, DLambdaX)
except:
 _st_.goboom(317)
_st_.blockbegin()
try:
 p=contour_plot(Lambda,(x,-2*pi,2*pi),(y,-3,3),contours=srange(-1,5,.2),fill=False)
except:
 _st_.goboom(322)
_st_.blockend()
try:
 _st_.plot(1, format='png', _p_=p)
except:
 _st_.goboom(325)
_st_.blockbegin()
try:
 x,y,z=var('x,y,z')
 Eq1=y*(z-1)
 Eq2=x*(z+1)
 Eq3=-2*x*y
 Equilibrios=solve([Eq1,Eq2,Eq3],[x,y,z])
except:
 _st_.goboom(336)
_st_.blockend()
try:
 _st_.inline(3, Equilibrios)
except:
 _st_.goboom(338)
_st_.blockbegin()
try:
 X(x,y,z)=[Eq1,Eq2,Eq3]
 A=X.diff()(0,0,0)
 D=A.eigenmatrix_right()
except:
 _st_.goboom(344)
_st_.blockend()
try:
 _st_.inline(4, D)
except:
 _st_.goboom(345)
_st_.blockbegin()
try:
 Lambda(x,y,z)=1/2*(x^2+y^2+z^2)
 DX=Lambda.diff().dot_product(X).simplify_full()
except:
 _st_.goboom(352)
_st_.blockend()
try:
 _st_.inline(5, DX)
except:
 _st_.goboom(353)
_st_.blockbegin()
try:
 def X(t,x):
     return [ x[1]*(x[2]-1),x[0]*(x[2]+1),-2*x[0]*x[1]]
 
 T =  ode_solver()
 T.function=X
 T.algorithm="rk8pd"
 A=[]
 T.ode_solve(y_0=[1,1,1],t_span=[0,30], num_points=100)
 a=T.solution
 Sol=[soln[1] for soln in a]
 Gra=list_plot(Sol,plotjoined=True,thickness=.5,rgbcolor=(1,0,0))
 theta,phi=var('theta,phi')
 Esfe=parametric_plot3d([sqrt(3.0)*cos(theta)*sin(phi), sqrt(3.0)*sin(theta)*sin(phi), sqrt(3.0)*cos(phi)], (theta,0,2*pi), (phi,0,pi),opacity=0.4)
 Gra+=Esfe
 T.ode_solve(y_0=[1,0,sqrt(2)],t_span=[0,30], num_points=100)
 a=T.solution
 Sol=[soln[1] for soln in a]
 Gra+=list_plot(Sol,plotjoined=True,thickness=.5,rgbcolor=(1,0,0))
 T.ode_solve(y_0=[1,0,-sqrt(2)],t_span=[0,30], num_points=100)
 a=T.solution
 Sol=[soln[1] for soln in a]
 Gra+=list_plot(Sol,plotjoined=True,thickness=.5,rgbcolor=(1,0,0))
 T.ode_solve(y_0=[-1,0,-sqrt(2)],t_span=[0,30], num_points=100)
 a=T.solution
 Sol=[soln[1] for soln in a]
 Gra+=list_plot(Sol,plotjoined=True,thickness=.5,rgbcolor=(1,0,0))
except:
 _st_.goboom(382)
_st_.blockend()
try:
 _st_.plot(2, format='png', _p_=Gra)
except:
 _st_.goboom(384)
_st_.blockbegin()
try:
 x,y,z,t=var('x,y,z,t')
 X(x,y,z)=(-y+x*z,x+y*z,-z*(x^2+y^2))
 DX=X.diff()(x,y,z)
except:
 _st_.goboom(468)
_st_.blockend()
try:
 _st_.inline(6, DX)
except:
 _st_.goboom(471)
_st_.blockbegin()
try:
 A=(X.diff())(cos(t),sin(t),0).simplify_trig()
except:
 _st_.goboom(476)
_st_.blockend()
try:
 _st_.inline(7, A)
except:
 _st_.goboom(477)
_st_.blockbegin()
try:
 Eq=A*vector([x,y,z]).column()
except:
 _st_.goboom(481)
_st_.blockend()
try:
 _st_.inline(8, Eq)
except:
 _st_.goboom(482)
_st_.blockbegin()
try:
 t=var('t')
 x=function('x',t)
 y=function('y',t)
 z=function('z',t)
 z_sol=desolve( z.diff(t)==-z,z)
except:
 _st_.goboom(491)
_st_.blockend()
try:
 _st_.inline(9, z_sol)
except:
 _st_.goboom(492)
_st_.blockbegin()
try:
 a,b,c=var('a,b,c')
 Sol=desolve_system([x.diff(t)==c*e^(-t)*cos(t)-y\
     ,y.diff(t)==sin(t)*c*e^(-t)+x],[x,y],ivar=t,ics=[0,a,b])
except:
 _st_.goboom(497)
_st_.blockend()
try:
 _st_.inline(10, Sol[0])
except:
 _st_.goboom(500)
try:
 _st_.inline(11, Sol[1])
except:
 _st_.goboom(501)
_st_.endofdoc()
