## -*- encoding: utf-8 -*-
# This file was *autogenerated* from the file uni5.sagetex.sage
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_470 = Integer(470); _sage_const_523 = Integer(523); _sage_const_5 = Integer(5); _sage_const_521 = Integer(521); _sage_const_1034 = Integer(1034); _sage_const_9 = Integer(9); _sage_const_507 = Integer(507); _sage_const_1032 = Integer(1032); _sage_const_1012 = Integer(1012); _sage_const_1103 = Integer(1103); _sage_const_525 = Integer(525); _sage_const_698 = Integer(698); _sage_const_7 = Integer(7); _sage_const_20 = Integer(20); _sage_const_21 = Integer(21); _sage_const_1139 = Integer(1139); _sage_const_1018 = Integer(1018); _sage_const_1178 = Integer(1178); _sage_const_6 = Integer(6); _sage_const_1184 = Integer(1184); _sage_const_1185 = Integer(1185); _sage_const_4 = Integer(4); _sage_const_1081 = Integer(1081); _sage_const_740 = Integer(740); _sage_const_1083 = Integer(1083); _sage_const_649 = Integer(649); _sage_const_1177 = Integer(1177); _sage_const_747 = Integer(747); _sage_const_744 = Integer(744); _sage_const_745 = Integer(745); _sage_const_643 = Integer(643); _sage_const_1071 = Integer(1071); _sage_const_700 = Integer(700); _sage_const_467 = Integer(467); _sage_const_1163 = Integer(1163); _sage_const_8 = Integer(8); _sage_const_1063 = Integer(1063); _sage_const_1066 = Integer(1066); _sage_const_1065 = Integer(1065); _sage_const_1026 = Integer(1026); _sage_const_1024 = Integer(1024); _sage_const_510 = Integer(510); _sage_const_900 = Integer(900); _sage_const_12 = Integer(12); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_17 = Integer(17); _sage_const_16 = Integer(16); _sage_const_15 = Integer(15); _sage_const_14 = Integer(14); _sage_const_19 = Integer(19); _sage_const_18 = Integer(18); _sage_const_1009 = Integer(1009); _sage_const_1105 = Integer(1105); _sage_const_1197 = Integer(1197); _sage_const_13 = Integer(13); _sage_const_1075 = Integer(1075); _sage_const_1158 = Integer(1158); _sage_const_1199 = Integer(1199); _sage_const_1152 = Integer(1152); _sage_const_586 = Integer(586); _sage_const_1136 = Integer(1136); _sage_const_1070 = Integer(1070); _sage_const_898 = Integer(898); _sage_const_1016 = Integer(1016); _sage_const_588 = Integer(588)## This file (uni5.sagetex.sage) was *autogenerated* from uni5.tex with sagetex.sty version 2012/01/16 v2.3.3-69dcb0eb93de.
import sagetex
_st_ = sagetex.SageTeXProcessor('uni5', version='2012/01/16 v2.3.3-69dcb0eb93de', version_check=True)
_st_.blockbegin()
try:
 """
 Método de coeficientes indeterminados para
 la ecuación y'=y
 """
 #La serie la sumamos hasta X^orden
 orden=_sage_const_7 
 # Lista coeficientes
 Lista=['a%s'%i for i in range(orden)]
 #expresiones polinómicos con los an
 A = PolynomialRing(QQ,Lista)
 #Series con coeficientes en A
 Series = PowerSeriesRing(A, names=('X',)); (X,) = Series._first_ngens(1)
 #n-upla de los a_n
 Coef=A.gens()
 #serie truncada en orden
 y=sum(Coef[i]*X**i for i in range(orden))
 #sustituyo en la ecuación
 Ecua=y.derivative()-y
 #lista de los a_n convertidos en expresión
 a= [SR(i) for i in A.gens()]
 """ A las ecuaciones le agrego a0=1 y evito usar la
 última pues tiene un problema que viene del truncamiento
 """
 Ecuaciones=[a[_sage_const_0 ]-_sage_const_1 ,list(Ecua)[:-_sage_const_1 ]]
 #resuelvo las relaciones de recurrencia
 Sol_a_n=solve(Ecuaciones,a)
 """Lista de los coeficientes convertidos en racionales """
 L=[QQ(f.rhs()) for f in Sol_a_n[_sage_const_0 ]]
 # Desarrollo en serie de la solución
 y=sum([L[i]*X**i for i in range(orden)])+O(X**orden)
except:
 _st_.goboom(_sage_const_467 )
_st_.blockend()
try:
 _st_.inline(_sage_const_0 , latex(y))
except:
 _st_.goboom(_sage_const_470 )
try:
 _st_.inline(_sage_const_0 , latex(y))
except:
 _st_.goboom(_sage_const_470 )
try:
 _st_.inline(_sage_const_0 , latex(y))
except:
 _st_.goboom(_sage_const_470 )
try:
 _st_.inline(_sage_const_0 , latex(y))
except:
 _st_.goboom(_sage_const_470 )
_st_.blockbegin()
try:
 """ Resolvemos la relación de recurrencia
 de los números de Fibonacci"""
 #Importamos Sympy
 from sympy import *
 #En Sympy se declaran símbolos en lugar de variables
 n=Symbol('n',integer=True)
 #Y así se declaran funciones
 y = Function('y')
 #Así una ecuación
 f=Equality(y(n),y(n-_sage_const_1 )+y(n-_sage_const_2 ))
 #Así la resolvemos
 rsolve(f,y(n))
 
except:
 _st_.goboom(_sage_const_507 )
_st_.blockend()
try:
 _st_.inline(_sage_const_1 , latex(rsolve(f,y(n))))
except:
 _st_.goboom(_sage_const_510 )
try:
 _st_.inline(_sage_const_1 , latex(rsolve(f,y(n))))
except:
 _st_.goboom(_sage_const_510 )
try:
 _st_.inline(_sage_const_1 , latex(rsolve(f,y(n))))
except:
 _st_.goboom(_sage_const_510 )
try:
 _st_.inline(_sage_const_1 , latex(rsolve(f,y(n))))
except:
 _st_.goboom(_sage_const_510 )
_st_.blockbegin()
try:
 reset()
 n=var('n')
 C0,C1=var('C0,C1')
 A=C0*(_sage_const_1 /_sage_const_2 +sqrt(_sage_const_5 )/_sage_const_2 )**n+C1*(_sage_const_1 /_sage_const_2 -sqrt(_sage_const_5 )/_sage_const_2 )**n
 Cval=solve([A(n=_sage_const_0 )-_sage_const_1 ,A(n=_sage_const_1 )-_sage_const_1 ],[C0,C1],solution_dict=True)
 Fib=A.subs(Cval[_sage_const_0 ])
 [Fib(n=i).expand() for i in range(_sage_const_10 )]
except:
 _st_.goboom(_sage_const_521 )
_st_.blockend()
try:
 _st_.inline(_sage_const_2 , latex(Fib))
except:
 _st_.goboom(_sage_const_523 )
try:
 _st_.inline(_sage_const_2 , latex(Fib))
except:
 _st_.goboom(_sage_const_523 )
try:
 _st_.inline(_sage_const_2 , latex(Fib))
except:
 _st_.goboom(_sage_const_523 )
try:
 _st_.inline(_sage_const_2 , latex(Fib))
except:
 _st_.goboom(_sage_const_523 )
try:
 _st_.inline(_sage_const_3 , latex([Fib(n=i).expand() for i in range(_sage_const_20 )]))
except:
 _st_.goboom(_sage_const_525 )
_st_.blockbegin()
try:
 """
 Método de coeficientes indeterminados para
 la ecuación (1+x)y'=py , y(0)=1
 """
 orden=_sage_const_4 
 #En la lista de coeficientes debemos poner p
 Lista=['a%s'%i for i in range(orden)]+['p']
 A = PolynomialRing(QQ,Lista)
 Series = PowerSeriesRing(A, names=('X',)); (X,) = Series._first_ngens(1)
 Coef=A.gens()
 y=sum(Coef[i]*X**i for i in range(orden))
 Ecua=(_sage_const_1 +X)*y.derivative()-A.gens()[-_sage_const_1 ]*y
 a= [SR(i) for i in A.gens()[:-_sage_const_1 ]]
 Ecuaciones=[a[_sage_const_0 ]-_sage_const_1 ,list(Ecua)[:-_sage_const_1 ]]
 Sol_a_n=solve(Ecuaciones,a)
 L=[f.rhs().factor() for f in Sol_a_n[_sage_const_0 ]]
 x=var('x')
 y=sum([L[i]*x**i for i in range(orden)])
except:
 _st_.goboom(_sage_const_586 )
_st_.blockend()
try:
 _st_.inline(_sage_const_4 , latex(y))
except:
 _st_.goboom(_sage_const_588 )
try:
 _st_.inline(_sage_const_4 , latex(y))
except:
 _st_.goboom(_sage_const_588 )
try:
 _st_.inline(_sage_const_4 , latex(y))
except:
 _st_.goboom(_sage_const_588 )
try:
 _st_.inline(_sage_const_4 , latex(y))
except:
 _st_.goboom(_sage_const_588 )
_st_.blockbegin()
try:
 """
 Método de coeficientes indeterminados para
 la ecuación y''+omega^2y=0
 """
 orden=_sage_const_8 
 Lista=['a%s'%i for i in range(orden)]+['omega']
 A = PolynomialRing(QQ,Lista)
 Series = PowerSeriesRing(A, names=('X',)); (X,) = Series._first_ngens(1)
 Coef=A.gens()
 y=sum(Coef[i]*X**i for i in range(orden))
 Ecua=y.derivative(_sage_const_2 )+A.gens()[-_sage_const_1 ]**_sage_const_2 *y
 a= [SR(i) for i in A.gens()[:-_sage_const_1 ]]
 Ecuaciones=[a[_sage_const_0 ]-_sage_const_1 ,a[_sage_const_1 ],list(Ecua)[:-_sage_const_2 ]]
 Sol_a_n=solve(Ecuaciones,a)
 L=[f.rhs() for f in Sol_a_n[_sage_const_0 ]]
 x=var('x')
 y1=sum([L[i]*x**i for i in range(orden)])
 Ecuaciones=[a[_sage_const_0 ],a[_sage_const_1 ]-_sage_const_1 ,list(Ecua)[:-_sage_const_2 ]]
 Sol_a_n=solve(Ecuaciones,a)
 L=[f.rhs() for f in Sol_a_n[_sage_const_0 ]]
 y2=sum([L[i]*x**i for i in range(orden)])
except:
 _st_.goboom(_sage_const_643 )
_st_.blockend()
try:
 _st_.inline(_sage_const_5 , latex(y1))
except:
 _st_.goboom(_sage_const_649 )
try:
 _st_.inline(_sage_const_6 , latex(y2))
except:
 _st_.goboom(_sage_const_649 )
try:
 _st_.inline(_sage_const_5 , latex(y1))
except:
 _st_.goboom(_sage_const_649 )
try:
 _st_.inline(_sage_const_6 , latex(y2))
except:
 _st_.goboom(_sage_const_649 )
_st_.blockbegin()
try:
 """
 Método de coeficientes indeterminados para
 la ecuación(1-x^2)y''-2xy'+p(p+1)y=0
 """
 orden=_sage_const_10 
 Lista=['a%s'%i for i in range(orden)]+['p']
 A = PolynomialRing(QQ,Lista)
 Series = PowerSeriesRing(A, names=('X',)); (X,) = Series._first_ngens(1)
 Coef=A.gens()
 y=sum(Coef[i]*X**i for i in range(orden))
 p=A.gens()[-_sage_const_1 ]
 Ecua=(_sage_const_1 -X**_sage_const_2 )*y.derivative(_sage_const_2 )-_sage_const_2 *X*y.derivative()+p*(p+_sage_const_1 )*y
 a= [SR(i) for i in A.gens()[:-_sage_const_1 ]]
 Ecuaciones=list(Ecua)[:-_sage_const_2 ]
 Sol_a_n=solve(Ecuaciones,a)
 Sol_a_n=[i.lhs()==i.rhs().factor() for i in Sol_a_n[_sage_const_0 ]]
except:
 _st_.goboom(_sage_const_698 )
_st_.blockend()
try:
 _st_.inline(_sage_const_7 , latex(vector(Sol_a_n).column()))
except:
 _st_.goboom(_sage_const_700 )
_st_.blockbegin()
try:
 def legendre(n):
     """
     Método de coeficientes indeterminados para
     la ecuación(1-x^2)y''-2xy'+p(p+1)y=0
     """
     if n not in NN:
         print "n no es entero"
     else:
         orden=n+_sage_const_2 
         Lista=['a%s'%i for i in range(orden)]
         A = PolynomialRing(QQ,Lista)
         Series = PowerSeriesRing(A, names=('X',)); (X,) = Series._first_ngens(1)
         Coef=A.gens()
         y=sum(Coef[i]*X**i for i in range(orden))
         Ecua=(_sage_const_1 -X**_sage_const_2 )*y.derivative(_sage_const_2 )-_sage_const_2 *X*y.derivative()+n*(n+_sage_const_1 )*y
         a= [SR(i) for i in A.gens()]
         Ecuaciones=list(Ecua)[:-_sage_const_2 ]
         s=var('s')
         if n%_sage_const_2 ==_sage_const_0 :
             Ecuaciones+=[a[_sage_const_0 ]-s,a[_sage_const_1 ]]
         else:
             Ecuaciones+=[a[_sage_const_0 ],a[_sage_const_1 ]-s]
         Sol_a_n=solve(Ecuaciones,a)
         L=[f.rhs() for f in Sol_a_n[_sage_const_0 ]]
         x=var('x')
         y=sum([L[i]*x**i for i in range(orden)])
         sol=solve(y(x=_sage_const_1 )==_sage_const_1 ,s)
         return y.subs(sol[_sage_const_0 ])
except:
 _st_.goboom(_sage_const_740 )
_st_.blockend()
_st_.blockbegin()
try:
 L=[legendre(i) for i in range(_sage_const_10 )]
except:
 _st_.goboom(_sage_const_744 )
_st_.blockend()
try:
 _st_.inline(_sage_const_8 , latex(vector(L).column()))
except:
 _st_.goboom(_sage_const_745 )
try:
 _st_.plot(_sage_const_0 , format='notprovided', _p_=plot(L))
except:
 _st_.goboom(_sage_const_747 )
_st_.blockbegin()
try:
 s,p,q=var('s,p,q')
 Raices=solve(s**_sage_const_2 +(p-_sage_const_1 )*s+q==_sage_const_0 ,s)
except:
 _st_.goboom(_sage_const_898 )
_st_.blockend()
try:
 _st_.inline(_sage_const_9 , latex(Raices[_sage_const_0 ].rhs()))
except:
 _st_.goboom(_sage_const_900 )
try:
 _st_.inline(_sage_const_10 , latex(Raices[_sage_const_1 ].rhs()))
except:
 _st_.goboom(_sage_const_900 )
_st_.blockbegin()
try:
 orden=_sage_const_7 
 #Declaramos muchas variables en una sola linea
 ListaCoefNom='a0'
 for i in range(_sage_const_1 ,orden):
     ListaCoefNom+=',a'+str(i)
 a=var(ListaCoefNom)
 x=var('x')
 m=var('m')
 y = x**m*sum(a[i]*x**i for i in range(orden))
 Ecua=y.diff(x,_sage_const_2 )+(_sage_const_1 /_sage_const_2 +x)/x*y.diff(x,_sage_const_1 )-(_sage_const_1 /(_sage_const_2 *x**_sage_const_2 ))*y
 
 """
 La exponente más chico para el x en esta expresión es, a los sumo, m-2. Dividimos por m-2 asi todos los exponentes son enteros positivos
 """
 Ecua=Ecua/x**(m-_sage_const_2 )
 Ecua=Ecua.coefficients(x)
 Ecuaciones=[f[_sage_const_0 ] for f in Ecua]
except:
 _st_.goboom(_sage_const_1009 )
_st_.blockend()
try:
 _st_.inline(_sage_const_11 , latex(vector(Ecuaciones).column()))
except:
 _st_.goboom(_sage_const_1012 )
_st_.blockbegin()
try:
 Sol_Ecua_Ind=solve(Ecuaciones[_sage_const_0 ],m)
except:
 _st_.goboom(_sage_const_1016 )
_st_.blockend()
try:
 _st_.inline(_sage_const_12 , latex(Sol_Ecua_Ind))
except:
 _st_.goboom(_sage_const_1018 )
_st_.blockbegin()
try:
 Ecuaciones1=[f.subs(Sol_Ecua_Ind[_sage_const_1 ]) for f in Ecuaciones[_sage_const_1 :]]
 Coef_Sol_1=solve([a[_sage_const_0 ]-_sage_const_1 ]+ Ecuaciones1[:-_sage_const_1 ],a,solution_dict=True)
 y1=y.subs(Coef_Sol_1[_sage_const_0 ]).subs(Sol_Ecua_Ind[_sage_const_1 ])
except:
 _st_.goboom(_sage_const_1024 )
_st_.blockend()
try:
 _st_.inline(_sage_const_13 , latex(y1.expand()))
except:
 _st_.goboom(_sage_const_1026 )
_st_.blockbegin()
try:
 Ecuaciones2=[f.subs(Sol_Ecua_Ind[_sage_const_0 ]) for f in Ecuaciones[_sage_const_1 :]]
 Coef_Sol_1=solve([a[_sage_const_0 ]-_sage_const_1 ]+ Ecuaciones1[:-_sage_const_1 ],a,solution_dict=True)
 y2=y.subs(Coef_Sol_1[_sage_const_0 ]).subs(Sol_Ecua_Ind[_sage_const_0 ])
except:
 _st_.goboom(_sage_const_1032 )
_st_.blockend()
try:
 _st_.inline(_sage_const_14 , latex(y2.expand()))
except:
 _st_.goboom(_sage_const_1034 )
_st_.blockbegin()
try:
 orden=_sage_const_10 
 ListaCoefNom='a0'
 for i in range(_sage_const_1 ,orden):
     ListaCoefNom+=',a'+str(i)
 a=var(ListaCoefNom)
 x=var('x')
 m,p=var('m,p')
 y = x**m*sum(a[i]*x**i for i in range(orden))
 Ecua=y.diff(x,_sage_const_2 )+_sage_const_1 /x*y.diff(x,_sage_const_1 )+(_sage_const_1 -p**_sage_const_2 /x**_sage_const_2 )*y
 Ecua=Ecua/x**(m-_sage_const_2 )
 Ecua=Ecua.coefficients(x)
 Ecuaciones=[f[_sage_const_0 ] for f in Ecua]
 Sol_Ecua_Ind=solve(Ecuaciones[_sage_const_0 ],m)
except:
 _st_.goboom(_sage_const_1063 )
_st_.blockend()
try:
 _st_.inline(_sage_const_15 , latex(Sol_Ecua_Ind))
except:
 _st_.goboom(_sage_const_1065 )
try:
 _st_.inline(_sage_const_15 , latex(Sol_Ecua_Ind))
except:
 _st_.goboom(_sage_const_1065 )
try:
 _st_.inline(_sage_const_15 , latex(Sol_Ecua_Ind))
except:
 _st_.goboom(_sage_const_1065 )
try:
 _st_.inline(_sage_const_15 , latex(Sol_Ecua_Ind))
except:
 _st_.goboom(_sage_const_1065 )
try:
 _st_.inline(_sage_const_16 , latex(Ecua))
except:
 _st_.goboom(_sage_const_1066 )
_st_.blockbegin()
try:
 Ecuaciones1=[f.subs(Sol_Ecua_Ind[_sage_const_1 ]).factor()\
 for f in Ecuaciones[_sage_const_1 :-_sage_const_2 ]]
except:
 _st_.goboom(_sage_const_1070 )
_st_.blockend()
try:
 _st_.inline(_sage_const_17 , latex(vector(Ecuaciones1).column()))
except:
 _st_.goboom(_sage_const_1071 )
_st_.blockbegin()
try:
 Coef_Sol_1=solve(Ecuaciones1,a[_sage_const_1 :],solution_dict=True)
except:
 _st_.goboom(_sage_const_1075 )
_st_.blockend()
_st_.blockbegin()
try:
 SolucionesA=solve(Ecuaciones1,a[_sage_const_1 :])[_sage_const_0 ]
 SolucionesB=[f.factor() for f in SolucionesA]
 for i in range(_sage_const_0 ,len(SolucionesB),_sage_const_2 ):
     SolucionesB[i]=SolucionesB[i]==_sage_const_0 
except:
 _st_.goboom(_sage_const_1081 )
_st_.blockend()
try:
 _st_.inline(_sage_const_18 , latex( vector( SolucionesB).column() ))
except:
 _st_.goboom(_sage_const_1083 )
_st_.blockbegin()
try:
 y1=y.subs(Coef_Sol_1[_sage_const_0 ]).subs(Sol_Ecua_Ind[_sage_const_1 ])
except:
 _st_.goboom(_sage_const_1103 )
_st_.blockend()
try:
 _st_.inline(_sage_const_19 , latex(y1))
except:
 _st_.goboom(_sage_const_1105 )
try:
 _st_.commandline(_sage_const_0 , r"""
 sage: graf=plot(gamma(x),(x,-10,10),ymin=-10,ymax=10)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1136 )
try:
 _st_.plot(_sage_const_1 , format='notprovided', _p_=graf)
except:
 _st_.goboom(_sage_const_1139 )
try:
 _st_.commandline(_sage_const_1 , r"""
sage: J= lambda x,p: sum([(-1)^n/factorial(n)/gamma(p+n+1)*(x/2)^(2*n+p) for n in range(100)])
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1152 )
try:
 _st_.commandline(_sage_const_2 , r"""
sage: p1=plot(J(x,1),(x,0,35),rgbcolor=(1,0,0))
sage: p2=plot(J(x,2),(x,0,35),rgbcolor=(0,1,0))
sage: p3=plot(J(x,3),(x,0,35),rgbcolor=(0,0,1))
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1158 )
try:
 _st_.plot(_sage_const_2 , format='notprovided', _p_=p1+p2+p3)
except:
 _st_.goboom(_sage_const_1163 )
_st_.blockbegin()
try:
 Ecuaciones1=[f.subs(Sol_Ecua_Ind[_sage_const_0 ]).factor()\
 for f in Ecuaciones[_sage_const_1 :-_sage_const_2 ]]
except:
 _st_.goboom(_sage_const_1177 )
_st_.blockend()
try:
 _st_.inline(_sage_const_20 , latex(vector(Ecuaciones1).column()))
except:
 _st_.goboom(_sage_const_1178 )
try:
 _st_.inline(_sage_const_20 , latex(vector(Ecuaciones1).column()))
except:
 _st_.goboom(_sage_const_1178 )
try:
 _st_.inline(_sage_const_20 , latex(vector(Ecuaciones1).column()))
except:
 _st_.goboom(_sage_const_1178 )
try:
 _st_.inline(_sage_const_20 , latex(vector(Ecuaciones1).column()))
except:
 _st_.goboom(_sage_const_1178 )
_st_.blockbegin()
try:
 Ecuaciones2=[]
 for i in range(_sage_const_1 ,len(Ecuaciones1)):
     Ecuaciones2+=[solve(Ecuaciones1[i],a[i+_sage_const_1 ])[_sage_const_0 ]]
  
except:
 _st_.goboom(_sage_const_1184 )
_st_.blockend()
try:
 _st_.inline(_sage_const_21 , latex(vector(Ecuaciones2).column()))
except:
 _st_.goboom(_sage_const_1185 )
try:
 _st_.inline(_sage_const_21 , latex(vector(Ecuaciones2).column()))
except:
 _st_.goboom(_sage_const_1185 )
try:
 _st_.inline(_sage_const_21 , latex(vector(Ecuaciones2).column()))
except:
 _st_.goboom(_sage_const_1185 )
try:
 _st_.inline(_sage_const_21 , latex(vector(Ecuaciones2).column()))
except:
 _st_.goboom(_sage_const_1185 )
try:
 _st_.commandline(_sage_const_3 , r"""
sage: p1=plot(J(x,-1/3),(x,0,35),ymin=-2,ymax=2,rgbcolor=(1,0,0))
sage: p2=plot(J(x,-2/3),(x,0,35),ymin=-2,ymax=2,rgbcolor=(0,1,0))
sage: p3=plot(J(x,-5/3),(x,0,35),ymin=-2,ymax=2,rgbcolor=(0,0,1))
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1197 )
try:
 _st_.plot(_sage_const_3 , format='notprovided', _p_=p1+p2+p3)
except:
 _st_.goboom(_sage_const_1199 )
_st_.endofdoc()
